Regressione Lineare

import seaborn as sns
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Caricare il dataset Iris
iris = sns.load_dataset('iris')

X = iris[['sepal_length']]  # Variabile indipendente (predittore)
y = iris['petal_length']    # Variabile dipendente (target)

# Inizializzare il modello di Regressione Lineare
model = LinearRegression()

# Alleno il modello
model.fit(X, y)

# Predire i valori
y_pred = model.predict(X)

# Visualizzare i risultati
plt.figure(figsize=(10, 6))
plt.scatter(X, y, color='blue', label='Dati reali')
plt.plot(X, y_pred, color='red', label='Regressione lineare')
plt.title('Regressione Lineare: Sepal Length vs Petal Length')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Petal Length (cm)')
plt.legend()
plt.grid(True)
plt.show()

# Ottenere l'intercetta e il coefficiente angolare
intercept = model.intercept_
slope = model.coef_[0]

print(f"Intercetta: {intercept}")
print(f"Coefficiente angolare: {slope}")

Clustering

from sklearn.cluster import KMeans
import seaborn as sns
import matplotlib.pyplot as plt

# Selezionare le caratteristiche per il clustering
X = iris[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]

kmeans = KMeans(n_clusters=3, random_state=42)

# Allenare il modello
kmeans.fit(X)

# Predire i cluster
clusters = kmeans.predict(X)

# Aggiungere i cluster al dataset
iris['cluster'] = clusters

# Visualizzare i cluster
plt.figure(figsize=(10, 6))
plt.scatter(iris['sepal_length'], iris['sepal_width'], c=iris['cluster'], cmap='viridis', label='Cluster')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', label='Centroidi')
plt.title('K-means Clustering: Sepal Length vs Sepal Width')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.legend()
plt.grid(True)
plt.show()
