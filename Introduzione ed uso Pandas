import pandas as pd

# Creazione di una Serie da una lista
numeri = [10, 20, 30, 40, 50]
serie = pd.Series(numeri)
print(serie)

# Serie con etichette personalizzate
etichette = ['a', 'b', 'c', 'd', 'e']
serie_con_etichette = pd.Series(numeri, index=etichette)
print(serie_con_etichette)

# Serie da un dizionario
dati = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 50}
serie_da_dizionario = pd.Series(dati)
print(serie_da_dizionario)

Funzioni ed utilizzo (Parte 1)

# Operazioni con le Serie
print(serie[2])
print(serie_con_etichette['a'])
print(serie_con_etichette * 5)

def quadrato(x):
    return x * x

print(serie.apply(quadrato))

Funzioni ed utilizzo (Parte 2)

# Creazione di un DataFrame da un dizionario di liste
dati = {
    'Nome': ['Alice', 'Bob', 'Charlie'],
    'EtÃ ': [25, 30, 35],
    'CittÃ ': ['Roma', 'Milano', 'Torino']
}

df = pd.DataFrame(dati)
print(df)

Funzioni ed utilizzo (Parte 3)

# Esportare il DataFrame come file CSV
df.to_excel('dati.xlsx', index=False)
print("DataFrame esportato come 'dati.xlsx'")

Funzioni ed utilizzo (Parte 4)

# Caricare il dataset Titanic
url = 'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'
df = pd.read_csv(url)

print(df.head(3))
print(df.tail(5))
print(df.info())

print(df[['Age', 'Name']])
print(df.iloc[100:105, 4:8])
print(df.loc[15:55, ['Age', 'Fare']])
print(df[df['Age'] > 30])
print(df[df['Embarked'] != 'C'])
print(df.columns)

Funzioni ed utilizzo (Parte 5)

# Aggiungere una nuova colonna
min_salario = 3
max_salario = 100

df['Salario'] = np.random.randint(min_salario, max_salario, size=len(df))
print(df['Salario'])

Funzioni ed utilizzo (Parte 6)

# Aggiunta di una nuova riga
nuova_riga = {'Name': 'Mark', 'Age': 29, 'Embarked': 'S'}
df = pd.concat([df, pd.DataFrame([nuova_riga])], ignore_index=True)
print(df.tail())

# Rimozione di una riga
df = df.drop(index=0)
print(df.head(2))

Funzioni ed utilizzo (Parte 7)

# Merge di DataFrame
df1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'val1': [1, 2, 3]})
df2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'val2': [4, 5, 6]})

merged_df = pd.merge(df1, df2, on='key', how='inner')
print(merged_df)

merged_df_outer = pd.merge(df1, df2, on='key', how='outer')
print(merged_df_outer)

merged_df_left = pd.merge(df1, df2, on='key', how='left')
print(merged_df_left)

merged_df_right = pd.merge(df1, df2, on='key', how='right')
print(merged_df_right)

Funzioni ed utilizzo (Parte 8)

# Join di DataFrame
df3 = pd.DataFrame({'val3': [7, 8, 9]}, index=['A', 'B', 'C'])
joined_df = df1.set_index('key').join(df3)
print(joined_df)

Funzioni ed utilizzo (Parte 9)

# Operazioni con date e orari
df = pd.DataFrame({
    'PassengerId': [1, 2, 3, 4, 5],
    'Name': ['Braund, Mr. Owen Harris', 'Cumings, Mrs. John Bradley (Florence Briggs Thayer)', 'Heikkinen, Miss. Laina', 'Futrelle, Mrs. Jacques Heath (Lily May Peel)', 'Allen, Mr. William Henry'],
    'Age': [22, 38, 26, 35, 35],
    'Ticket': ['A/5 21171', 'PC 17599', 'STON/O2. 3101282', '113803', '373450'],
    'Embarked': ['S', 'C', 'S', 'S', 'S']
})

df['data_acquisto_biglietto'] = pd.to_datetime(['2022-01-15', '2022-02-20', '2022-03-22', '2022-04-10', '2022-05-30'])
print(df)

df['Year'] = df['data_acquisto_biglietto'].dt.year
print(df[['data_acquisto_biglietto', 'Year']])

def trasformare_anno(data):
    return data.replace(year=1912)

df['data_acquisto_biglietto'] = df['data_acquisto_biglietto'].apply(trasformare_anno)
print(df['data_acquisto_biglietto'])

df['Month'] = df['data_acquisto_biglietto'].dt.month
print(df[['data_acquisto_biglietto', 'Month']])

df['Day'] = df['data_acquisto_biglietto'].dt.day
print(df[['data_acquisto_biglietto', 'Day']])

df['data_acquisto_biglietto_italiano'] = df['data_acquisto_biglietto'].dt.strftime('%m-%d-%Y')
print(df[['data_acquisto_biglietto', 'data_acquisto_biglietto_italiano']])

data = {
    'PassengerId': [1, 2, 3, 4, 5],
    'Name': ['John', 'Marie', 'Kevin', 'Laura', 'Diana'],
    'Embarked': ['2022-01-01 08:45:00', '2022-01-01 09:15:00', '2022-01-01 09:30:00', '2022-01-01 10:00:00', '2022-01-01 10:30:00']
}

df = pd.DataFrame(data)
df['Embarked'] = pd.to_datetime(df['Embarked'])
df['Ora di imbarco'] = df['Embarked'].dt.time

df['Ora'] = df['Embarked'].dt.hour
df['Minuti'] = df['Embarked'].dt.minute
df['Secondi'] = df['Embarked'].dt.second

df['Imbarco + 30 Minuti'] = df['Embarked'] + pd.DateOffset(minutes=30)
df['Arrotondato all\'Ora'] = df['Embarked'].dt.round('H')

df_filtro = df[(df['Embarked'].dt.hour >= 9) & (df['Embarked'].dt.hour <= 10)]
print(df_filtro)
